//http://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/
package package1;

public class Lps 
{
	public static void main(String[] args) 
	{
        String str = "agbdba";
        int result = getcount(str);
        System.out.println(result);
    }

    private static int getcount(String str) 

    {
        int[][] arr = new int[str.length()][str.length()];
        int a = 0, b = 0;
        int l = 1;
        
        while(l <= str.length())
        {
            for(int i = a, j = b; j < str.length(); i++, j++)
            {
                if(l == 1)
                {
                    arr[i][j] = 1;
                }
                else
                {
                    if(l == 2)
                    {
                        if (str.charAt(i) == str.charAt(j))
                            arr[i][j] = 2;
                        else
                        	arr[i][j] = 1;
                    }
                    else
                    {
                        if (str.charAt(i) == str.charAt(j))                        
                            arr[i][j] = 2 + Math.max(arr[i][j - 1], arr[i + 1][j]);
                        else
                        	arr[i][j] = Math.max(arr[i][j - 1], arr[i + 1][j]);
                    }
                }
            }
            l = l + 1;
            b = b + 1;
        }
        return arr[0][str.length() - 1];
    }
}


